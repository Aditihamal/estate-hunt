generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
  comments   Comment[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  username          String             @unique
  password          String
  userType          UserType           @default(Buyer) // Default userType
  isVerified        Boolean            @default(false)
  otp               String?
  otpExpiry         DateTime?
  avatar            String?
  createdAt         DateTime           @default(now())
  posts             Post[]
  savedPosts        SavedPost[]
  givenFeedbacks    Feedback[]         @relation("FeedbackAuthor") // Feedbacks given by this user
  receivedFeedbacks Feedback[]         @relation("FeedbackReceiver") // Feedbacks received by this user (if Agent)
  comments          Comment[]
  replies           Reply[]
  subscriptions     UserSubscription[]
}

enum UserType {
  Agent
  Buyer
  Admin
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(name: "FeedbackAuthor", fields: [userId], references: [id])
  userId String @db.ObjectId

  agent   User   @relation(name: "FeedbackReceiver", fields: [agentId], references: [id])
  agentId String @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  post    Post    @relation(fields: [postId], references: [id])
  postId  String  @db.ObjectId
  replies Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId

  agent   User   @relation(fields: [agentId], references: [id]) // ✅ ADD THIS
  agentId String @db.ObjectId // ✅ AND THIS
}

model SubscriptionPlan {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int
  duration      Int // in days
  userType      UserType // Either Buyer or Agent
  features      String[]
  subscriptions UserSubscription[]
}

model UserSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  planId    String   @db.ObjectId
  startDate DateTime @default(now())
  endDate   DateTime
  isActive  Boolean  @default(true)

  user User             @relation(fields: [userId], references: [id])
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
}
